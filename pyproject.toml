[project]
name = "opencv-stubs"
dynamic = ["version"]
authors = [{ name = "Bagard Hoel" }]
description = "Unofficial stubs for the opencv-python package."
keywords = ["OpenCV", "stubs"]
readme = "README.md"
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Operating System :: OS Independent",
  "Intended Audience :: Developers",
]
license = { text = "MIT" }
dependencies = ["numpy>=1.21"]
requires-python = ">=3.8"

[project.urls]
"Homepage" = "https://github.com/hoel-bagard/opencv-stubs"
"Bug Tracker" = "https://github.com/hoel-bagard/opencv-stubs/issues"

[project.optional-dependencies]
opencv = ["opencv-python>=4.7.0"]
opencv-contrib = ["opencv-contrib-python>=4.7.0"]
opencv-headless = ["opencv-python-headless>=4.7.0"]

[dependency-groups]
dev = ["ipython>=8.12.3; python_version >= '3.9'"]
lint = [
  # Typing
  "pyright>=1.1.389",
  # Python formatting
  "ruff>=0.11.9",
  # Spelling
  "codespell>=2.3.0; python_version >= '3.9'",
  # Markdown
  "mdformat>=0.7.22; python_version >= '3.9'",
  # To support GitHub's Markdown
  "mdformat-footnote>=0.1.1",
  "mdformat-frontmatter>=2.0.8; python_version >= '3.9'",
  "mdformat-gfm>=0.3.6; python_version >= '3.9'",
  "mdformat-gfm-alerts>=1.0.1; python_version >= '3.9'",
  # Format python, bash (requires shfmt to be present), JSON, TOML and YAML code blocks.
  "markdown-format-ruff>=1.0.0",
  "mdformat-shfmt>=0.1.0",
  "mdformat-taplo>=0.9.3",
  "mdformat-yamlfmt>=0.0.1",
  "mdformat-json>=1.0.0",
]

[build-system]
requires = ["hatchling>=1.10.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/cv2-stubs/__init__.pyi"

[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/.pytest_cache", "/build", "/dist", "/docs"]

[tool.hatch.build.targets.wheel]
packages = ["src/cv2-stubs"]

[tool.hatch.envs.pypi.scripts]
# hatch run pypi:publish_test
publish_test = "hatch build --clean && hatch publish -r test"
publish = "hatch build --clean && hatch publish"

[tool.ruff]
line-length = 20000
exclude = [".venv"]

[tool.ruff.lint]
select = [
  "B",
  "C4",
  "E",
  "I",
  "Q",
  "UP",
  "BLE",
  "COM",
  "DTZ",
  "PIE",
  "PT",
  "RSE",
  "SIM",
  "PTH",
  "TRY",
  "NPY",
  "RUF",
]
ignore = ["COM812", "D1", "D401", "D204", "D203", "D213", "S101", "PLR2004"]

[tool.ruff.lint.isort]
order-by-type = false

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.pyright]
include = ["src/cv2-stubs"]
pythonVersion = "3.10"
pythonPlatform = "Linux"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportMissingModuleSource = false
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = false
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportUntypedNamedTuple = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportMissingSuperCall = false
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownVariableType = "warning"
reportUnknownMemberType = false
# reportMissingParameterType = "warning"
# reportMissingTypeArgument = "warning"
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportImplicitStringConcatenation = false
reportUnusedCallResult = false
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportMatchNotExhaustive = "warning"
reportInvalidStringEscapeSequence = false
